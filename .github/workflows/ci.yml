name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run build --if-present || npx tsc --noEmit
    
    - name: Run linting (if available)
      run: npm run lint --if-present || echo "No linting configured"
      continue-on-error: true
    
    - name: Run unit tests
      run: npm run test:unit --if-present || npm run test -- --testPathPattern=unit
      env:
        NODE_OPTIONS: "--experimental-vm-modules"
    
    - name: Run integration tests  
      run: npm run test:integration --if-present || npm run test -- --testPathPattern=integration
      env:
        NODE_OPTIONS: "--experimental-vm-modules"
      continue-on-error: true # Allow integration tests to fail for now during stabilization
    
    - name: Run all tests
      run: npm run test
      env:
        NODE_OPTIONS: "--experimental-vm-modules"
      continue-on-error: true # Allow some test failures during development
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Build standalone executables
      run: npm run build:exe:all
    
    - name: Test Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        .\bin\cloudsaver-windows.exe --help
      shell: pwsh
    
    - name: Test Linux executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x bin/cloudsaver-linux
        ./bin/cloudsaver-linux --help
    
    - name: Upload executables
      uses: actions/upload-artifact@v4
      with:
        name: cloudsaver-executables-${{ matrix.os }}
        path: |
          bin/cloudsaver*
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build all platform executables
      run: npm run build:exe:all
    
    - name: Create release archive
      run: |
        mkdir -p release
        cp bin/cloudsaver* release/
        cp README.md SYNC-USAGE-GUIDE.md DISTRIBUTION.md LICENSE release/
        tar -czf cloudsaver-v${{ github.run_number }}.tar.gz release/
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloudsaver-release-v${{ github.run_number }}
        path: |
          cloudsaver-v${{ github.run_number }}.tar.gz
          bin/cloudsaver*
        retention-days: 90
